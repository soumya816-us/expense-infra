pipeline {
    agent {
        label 'AGENT-1'
    }
    options{
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    // environment {
    //     DEBUG = 'true'
    // }

    parameters {
        
        choice(name: 'ACTION', choices: ['Apply', 'Destroy'], description: 'Select something')

    }
    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds'){
                    sh """
                        cd 10-sg
                        terraform init -reconfigure
                        terraform plan -out=tfplan
                    """
            
                }
            }
        }

        stage('Apply or Destroy') {
            input{
                message "should we continue to ${params.ACTION}"
                ok "Yes, we should."
            }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 10-sg
                        if [ ${params.ACTION} == 'Apply' ]
                        then
                            terraform apply -auto-approve tfplan
                        elif [ ${params.ACTION} == 'Destroy' ]
                        then
                            terraform destroy -auto-approve
                        fi
                    """
            
                }
            }

        }

        stage ('Destroy VPC') {
            when {
                expression { params.ACTION == 'Destroy' }
            }
            steps{
                build job: '00-vpc', parameters: [string(name: 'ACTION', value: "Destroy")], wait: false
            }
        }
       
    }   
 
    post {
        always{
            echo "This sections runs always"
            deleteDir()
        }
        success{
            echo "This section run when pipeline success"
        }
        failure{
            echo "This section run when pipeline failure"
        }
    }
}
